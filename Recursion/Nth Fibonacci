Solution 1 -

// O(2^n) time | O(n) space

function getNthFib(n) {
  if (n === 2) {
    return 1;
  }

  if (n === 1) {
    return 0;
  }

  else {
    return getNthFib(n - 2) + getNthFib(n - 1);
  }
}

// Do not edit the line below.
exports.getNthFib = getNthFib;


Solution 2 --

// O(n) time | O(n) space

function getNthFib(n, memoize = {1: 0, 2: 1}) {
  if (n in memoize) {
    return memoize[n];
  }

  else {
    memoize[n] = getNthFib(n - 2) + getNthFib(n - 1);
    return memoize[n]
  }
}

// Do not edit the line below.
exports.getNthFib = getNthFib;


--- Solution 3 (Most Optimal)

// O(n) time | O(1) space

function getNthFib(n) {
  let lastTwo = [0, 1];
  let counter = 3;

  while (counter <= n) {
    let nextFib = lastTwo[0] + lastTwo[1];
    lastTwo[0] = lastTwo[1];
    lastTwo[1] = nextFib;
    counter++;
  }

  return n > 1 ? lastTwo[1] : lastTwo[0]
}

// Do not edit the line below.
exports.getNthFib = getNthFib;
