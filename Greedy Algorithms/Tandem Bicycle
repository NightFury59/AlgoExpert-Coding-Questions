// O(nlog(n)) time | O(1) space

function tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest) {
  redShirtSpeeds.sort((a, b) => a - b); // Sort in ascending order (default)
  blueShirtSpeeds.sort((a, b) => a - b); // Sort in ascending order for efficiency

  if (!fastest) {
    reverseArrayInPlace(redShirtSpeeds); // Reverse only if not prioritizing fastest pairing
  }

  let totalSpeed = 0;
  for (let i = 0; i < redShirtSpeeds.length; i++) {
    const rider1 = redShirtSpeeds[i];
    const rider2 = blueShirtSpeeds[blueShirtSpeeds.length - i - 1]; // Access from the end for efficient pairing
    totalSpeed += Math.max(rider1, rider2);
  }

  return totalSpeed;
}

function reverseArrayInPlace(array) {
  let start = 0;
  let end = array.length - 1;
  while (start < end) {
    const temp = array[start];
    array[start] = array[end];
    array[end] = temp;
    start++;
    end--;
  }
}

exports.tandemBicycle = tandemBicycle;
