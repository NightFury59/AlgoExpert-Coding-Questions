// O(n) time | O(n) space
function spiralTraverse(array) {
  let startRow = 0;
  let startCol = 0;
  let endRow = array.length - 1;
  let endCol = array[0].length - 1;
  let res = []

  while (startRow <= endRow && startCol <= endCol) {
    for (let col = startCol; col <= endCol; col++) {
      res.push(array[startRow][col]);
    }

    for (let row = startRow + 1; row <= endRow; row++) {
      res.push(array[row][endCol]);
    }

    for (let col = endCol - 1; col >= startCol; col--) {
      if (startRow === endRow) break;
      res.push(array[endRow][col]);
    }

    for (let row = endRow - 1; row > startRow; row--) {
      if (startCol === endCol) break;
      res.push(array[row][startCol]);
    }

    startRow ++;
    endRow--;
    startCol++;
    endCol--;
  }
  return res;
}

// Do not edit the line below.
exports.spiralTraverse = spiralTraverse;

Solution 2 - Recursive Method.
Time Complexity O(n) | Space Complexity O(n).

def spiralTraverse(array):
    result = []
    spiralFill(array, 0, len(array) - 1, 0, len(array[0]) - 1, result)
    return result

def spiralFill(array, startRow, endRow, startCol, endCol, result):
    if startRow > endRow or startCol > endCol:
        return result

    for col in range(startCol, endCol + 1):
        result.append(array[startRow][col])

    for row in range(startRow + 1, endRow + 1):
        result.append(array[row][endCol])

    for col in reversed(range(startCol, endCol)):
        result.append(array[endRow][col])

    for row in reversed(range(startRow + 1, endRow)):
        result.append(array[row][startCol])

    spiralFill(array, startRow + 1, endRow - 1, startCol + 1, endCol - 1, result)
