// O(n * log(m)) time | O(1) space
function optimalAssemblyLine(stepDurations, numStations) {
  let left = Math.max(...stepDurations);
  let right = stepDurations.reduce((a, b) => a + b);
  let maxStationDuration = Infinity;

  while (left <= right) {
    const potentialMaxStationDuration = Math.floor((left + right) / 2);

    if (isPotentialSolution(stepDurations, numStations, potentialMaxStationDuration)) {
      maxStationDuration = potentialMaxStationDuration;
      right = potentialMaxStationDuration - 1;
    } else {
      left = potentialMaxStationDuration + 1;
    }
  }

  return maxStationDuration
}

function isPotentialSolution(stepDurations, numStations, potentialMaxStationDuration) {
  let stationsRequired = 1;
  let currentDuration = 0;

  for (const stepDuration of stepDurations) {
    if (currentDuration + stepDuration > potentialMaxStationDuration) {
      stationsRequired += 1;
      currentDuration = stepDuration;
    } else {
      currentDuration += stepDuration;
    }
  }

  return stationsRequired <= numStations;
}

// Do not edit the line below.
exports.optimalAssemblyLine = optimalAssemblyLine;
